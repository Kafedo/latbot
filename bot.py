# –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ –±–æ—Ç–∞

# –ù–µ –∑–∞–±—ã—Ç—å !pip install pyTelegramBotAPI
# –ù–µ –∑–∞–±—ã—Ç—å !pip install https://huggingface.co/latincy/la_core_web_lg/resolve/main/la_core_web_lg-any-py3-none-any.whl
# –ù–µ –∑–∞–±—ã—Ç—å !pip install typing_extensions==4.7.1 --upgrade
# –ù–µ –∑–∞–±—ã—Ç—å !pip install -U pydantic spacy==3.4.4
# –ù–µ –∑–∞–±—ã—Ç—å !pip install -U spacy
# –ï—â—ë –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ –º–æ–¥–µ–ª—å !py -m spacy download ru_core_news_sm
# –Ø –±–µ–∑—É–º–Ω–æ —Ö–æ—Ç–µ–ª–∞ —Å–¥–µ–ª–∞—Ç—å –ø–æ–∏—Å–∫ –ø–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–º —Å–ª–æ–≤–∞–º —Ç–æ–∂–µ, –Ω–æ –ª–∞—Ç–∏–Ω—Å–∫–∞—è –º–æ–¥–µ–ª—å –≤–µ—Å–∏—Ç —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ, 
# —á—Ç–æ–±—ã –∑–∞–≥—Ä—É–∂–∞—Ç—å –µ—ë –Ω–∞ pythonanywhere, –ø–æ—ç—Ç–æ–º—É —è –≤–µ–∑–¥–µ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏–ª–∞ –µ—ë –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ

import telebot  # –º–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º
from telebot import types  # –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ –±–æ—Ç–µ
from pathlib import Path  # –∏—Ç–µ—Ä–∞—Ü–∏—è –ø–æ —Ñ–∞–π–ª–∞–º
import random  # –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–¥–∞—á–∏ —Ä–∞–Ω–¥–æ–º–Ω–æ–π —Ñ—Ä–∞–∑—ã
import re
import spacy  # –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ –ø–æ –ª–µ–º–º–µ
import pandas as pd  # –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞
import json  # –¥–ª—è —Å–ª–æ–≤–∞—Ä—è —Å id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π —Ñ—Ä–∞–∑
import matplotlib.pyplot as plt  # –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –ø–∞–π—á–∞—Ä—Ç–∞ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Ñ—Ä–∞–∑


with open("token.ini", "r") as o:
    token = o.read()
bot = telebot.TeleBot(token)
# –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É –ø–æ –µ–≥–æ API –∏–∑ —Ñ–∞–π–ª–∞

data = pd.read_csv("archieve/analize.csv")
pic_path = Path("plots")  # –¥–ª—è —Ñ-—Ü–∏–π –≤—ã–¥–∞—á–∏ —Ä–∞–∑–±–æ—Ä–∞

nlpru = spacy.load("ru_core_news_sm")  # –¥–ª—è —Ñ-—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ –ø–æ –ª–µ–º–º–µ
# nlpla = spacy.load('la_core_web_lg')

with open("archieve/col.json", "r", encoding="UTF-8") as j:
    jd = json.load(j)
# —Å–ª–æ–≤–∞—Ä—å —Å id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π

tags_dict = {"funny": ["—Å–º–µ—à–Ω–æ", "üçπ"], "intel": ["–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ", "üç∑"],
             "deep": ["–≥–ª—É–±–æ–∫–æ", "üç∏"], "other": ["–¥—Ä—É–≥–æ–µ", "ü´ó"]}
# —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —É–¥–æ–±–Ω–æ–π –≤—ã–¥–∞—á–∏ —Å—Ç–æ–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏

sours = f'https://ru.wikipedia.org/wiki/–°–ø–∏—Å–æ–∫_–∫—Ä—ã–ª–∞—Ç—ã—Ö_–ª–∞—Ç–∏–Ω—Å–∫–∏—Ö_–≤—ã—Ä–∞–∂–µ–Ω–∏–π'

main_keyboard = types.InlineKeyboardMarkup()  # —Å–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –º–µ–Ω—é
key_random = types.InlineKeyboardButton(text='üé≤–†–∞–Ω–¥–æ–º–Ω–∞—è —Ñ—Ä–∞–∑–∞üé≤', callback_data='random')
main_keyboard.add(key_random)  # —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
key_search = types.InlineKeyboardButton(text='üîç–ü–æ–∏—Å–∫ –ø–æ —Å–ª–æ–≤—Éüîç', callback_data='search')
main_keyboard.add(key_search)
key_collection = types.InlineKeyboardButton(text='üìö–ö–æ–ª–ª–µ–∫—Ü–∏—èüìö', callback_data='collection')
main_keyboard.add(key_collection)


# –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–æ—Å—Ç
@bot.message_handler(func=lambda message: message.text == '/start')
def start_1(message):
    hello = f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\
–£ –º–µ–Ω—è —Ç—É—Ç –µ—Å—Ç—å –Ω–µ–º–Ω–æ–≥–æ –ª–∞—Ç—ã–Ω–∏ (–≤–∑—è—Ç–æ–π –≤ —Ö–æ—Ä–æ—à–µ–º –∫–∞—á–µ—Å—Ç–µ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –º–∞—Ç—É—à–∫–∏ \
–Ω–∞—à–µ–π <a href="{sours}">–í–∏–∫–∏–ø–µ–¥–∏–∏</a>, –ø–æ—Ç–æ–º—É —á—Ç–æ –∫—Ç–æ –º—ã –±–µ–∑ –Ω–µ—ë). –ù—É –∫–∞–∫ "–Ω–µ–º–Ω–æ–≥–æ"... 1374 —Ñ—Ä–∞–∑—ã!\n–ö–∞–∂–µ—Ç—Å—è, \
–ø–æ —ç—Ç–∏–º —Ñ—Ä–∞–∑–∞–º –º–æ–∂–Ω–æ –≥–∞–¥–∞—Ç—å –∏–ª–∏ –ø–∞—Ñ–æ—Å–Ω–æ –ø–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å –∏–º–∏ —Ñ–æ—Ç–∫–∏ \
–≤ –Ω–µ–ª—å–∑—è–≥—Ä–∞–º–µ. (–ê –µ—â—ë –ø–æ–Ω—Ç–æ–≤–∞—Ç—å—Å—è —Å–≤–æ–µ–π —ç—Ä—É–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å—é, –µ—Å–ª–∏ –≤—Å—ë \
—ç—Ç–æ –∑–∞–ø–æ–º–Ω–∏—Ç—å, –µ—â—ë –∏ –ø–æ–Ω–∏–º–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ—Ä–∞–∑, –∞ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—è, –∫–∞–∫ –ø–æ–ø—É–≥–∞–π)\n\n\
–ì–ª—è–¥–∏, –≤ –º–µ–Ω—é –µ—Å—Ç—å:\n\
1) üé≤ –°–ª—É—á–∞–π–Ω–∞—è –∫—Ä—ã–ª–∞—Ç–∞—è —Ñ—Ä–∞–∑–∞ - –∫–∞–∫ —Ä–∞–∑ –Ω–∞ –ø–æ–≥–∞–¥–∞—Ç—å\n\
2) üîç –ü–æ–∏—Å–∫ –ø–æ —Å–ª–æ–≤—É - –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –≤–≤–µ–¥–∏ –ª—é–±–æ–µ —Å–ª–æ–≤–æ, –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –≤—ã–¥–∞—Ç—å —Ñ—Ä–∞–∑—ã, –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ\n\
3) üìö –ö–æ–ª–ª–µ–∫—Ü–∏—è - —Ç—É—Ç –±—É–¥—É—Ç —Ñ—Ä–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã —Ä–µ—à–∏—à—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞ –ø–∞–º—è—Ç—å\n\n–¢—ã –≤—Å–µ–≥–¥–∞ \
–º–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é, –Ω–∞–ø–∏—Å–∞–≤/–Ω–∞–∂–∞–≤ /menu –µ—Å–ª–∏ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –ø–æ—Å—Ç–µ –Ω–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –∏–Ω–æ–≥–æ'
    if jd.get(str(message.from_user.id)) is None:
        jd[str(message.from_user.id)] = [{"actuall_num": 0, "cur_tag": ""}, {"funny": [], "intel": [], "deep": [], "other": []}]
        with open("archieve/col.json", "w", encoding="UTF-8") as f:
            json.dump(jd, f, ensure_ascii=False)
    # –ó–¥–µ—Å—å –∏ –≤ —Ñ—É–Ω–∫—Ü–∏—è—Ö –Ω–∏–∂–µ –ø—Ä–æ–≥–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —é–∑–µ—Ä –≤ —Å–ª–æ–≤–∞—Ä–µ –∏ —Å–æ–∑–¥–∞—ë—Ç –¥–ª—è –Ω–µ–≥–æ —Å–ø–∏—Å–æ–∫, 
    # –≥–¥–µ –≤ –ø–µ—Ä–≤–æ–º —Å–ª–æ–≤–∞—Ä–µ –ª–µ–∂–∞—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ —è —Ö–æ—Ç–µ–ª–∞ —Å–¥–µ–ª–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏, –Ω–æ –æ–Ω–∏ –ø—É—Ç–∞–ª–∏—Å—å –º–µ–∂–¥—É —é–∑–µ—Ä–∞–º–∏
    bot.send_message(message.from_user.id, text=hello, reply_markup=main_keyboard, parse_mode="HTML")


# —Ñ—É–Ω–∫—Ü–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –ø–∏—Å—å–º–µ–Ω–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ
@bot.message_handler(func=lambda message: message.text == '/menu')
def start(message):
    if jd.get(str(message.from_user.id)) is None:
        jd[str(message.from_user.id)] = [{"actuall_num": 0, "cur_tag": ""}, {"funny": [], "intel": [], "deep": [], "other": []}]
        with open("archieve/col.json", "w", encoding="UTF-8") as f:
            json.dump(jd, f, ensure_ascii=False)
    t = '–ß–µ–≥–æ –∏–∑–≤–æ–ª–∏—Ç–µ?'
    bot.send_message(message.from_user.id, text=t, reply_markup=main_keyboard, parse_mode="HTML")


# —Ñ—É–Ω–∫—Ü–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –ø–æ –∫–Ω–æ–ø–∫–µ 
def menu(call):
    if jd.get(str(call.message.chat.id)) is None:
        jd[str(call.message.chat.id)] = [{"actuall_num": 0, "cur_tag": ""}, {"funny": [], "intel": [], "deep": [], "other": []}]
        with open("archieve/col.json", "w", encoding="UTF-8") as f:
            json.dump(jd, f, ensure_ascii=False)
    t = '–ß–µ–≥–æ –∏–∑–≤–æ–ª–∏—Ç–µ?'
    bot.send_message(call.message.chat.id, text=t, reply_markup=main_keyboard, parse_mode="HTML")


# —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ø–æ –ª–µ–º–º–µ
def search(call):
#    if bool(re.search('[–∞-—è–ê-–Ø]', call.text)) is True:
    doc = nlpru(call.text)  # –∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å —Ä—É—Å—Å–∫—É—é, –µ—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü–∞
#    else:
#        doc = nlpla(call.text)
    lemma_keys = []
    possible = []
    for token in doc:
        key = token.lemma_
        lemma_keys.append(key)  # –ª–µ–º–º–∞—Ç–∏–∑–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–ø–∏—Å–∫–æ–º –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –æ–Ω –≤–≤–æ–¥–∏—Ç —Ñ—Ä–∞–∑—É)
    lemset = set(lemma_keys)
    for idx, row in data.iterrows():
        quo = set(row['lemmas'].split(" "))
        if quo.issuperset(lemset):
            # –µ—Å–ª–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ª–µ–º–º –∑–∞–ø—Ä–æ—Å–∞ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –ª–µ–º–º –∫–∞–∫–æ–π-—Ç–æ —Ñ—Ä–∞–∑—ã,
            # —Ñ—Ä–∞–∑—É –∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø—Ä–∏ –Ω–µ–π —Å–æ—Ö—Ä–∞–Ω—è–µ–º
            possible.append([str(idx), row['phrases'], row['meaning']])
    if len(possible) == 0:
        text = f"–ü—Ä–æ—Å—Ç–∏, —è –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à—ë–ªüò•\n–ü–æ–∏—â–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –¥—Ä—É–≥–æ–µ?ü•∫"
        bot.send_sticker(
            call.from_user.id, sticker="CAACAgIAAxkBAAELzEVmAuzgSp32BrOhktE2rRc5jImHKwACVBQAAkmD-Euo9Qnwhai4_TQE")
        bot.send_message(call.from_user.id, text=text)
        bot.register_next_step_handler(call, search)
        # –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å, –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ —Å–Ω–∞—á–∞–ª–∞
    else:
        posll = []
        for i in possible:
            posl = " ‚Äî ".join(i)
            posll.append(posl)
        poss = "\n\n".join(posll)
        text = f'–ú–æ–≥—É—Ç –ø–æ–¥–æ–π—Ç–∏ —ç—Ç–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è:\n\n{poss}\n\n–ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –≤—ã—Ä–∞–∂–µ–Ω–∏—è, —Ä–∞–∑–±–æ—Ä –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—á–µ—à—å \
–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å\n\n–ú–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ü–∏—Ñ—Ä, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –≤ –º–µ–Ω—é'
        bot.send_message(call.from_user.id, text=text)
        bot.register_next_step_handler(call, send)
        # —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–æ—Å–∏–º —é–∑–µ—Ä–∞ –≤—ã–±—Ä–∞—Ç—å, —á—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–¥–∞—á–∏ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–π–¥—ë–Ω–Ω–æ–π —á–µ—Ä–µ–∑ search —Ñ—Ä–∞–∑—ã 
def send(call):
    if str(call.text).isdigit() is True:
        numer = int(call.text)
        jd[str(call.from_user.id)][0]["actuall_num"] = numer
        with open("archieve/col.json", "w", encoding="UTF-8") as f:
            json.dump(jd, f, ensure_ascii=False)
            # –æ–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –º–æ–∂–Ω–æ –±—ã–ª–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ—Ä–∞–∑—É –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é
        pic = open(pic_path / f'{numer}.png', 'rb')
        # –∑–¥–µ—Å—å —Ñ-—Ü–∏—è –≤—ã–¥–∞—á–∏ –∞–Ω–∞–ª–∏–∑–∞, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∏–∂–µ
        send = f"{analize(numer)}\n\n–ï—Å–ª–∏ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å —Ñ—Ä–∞–∑–∞, –º–æ–∂–µ—à—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—åüëá"
        save_not_keyboard = types.InlineKeyboardMarkup()  # —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        key_save = types.InlineKeyboardButton(text='üìö–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é', callback_data=f"save")
        save_not_keyboard.add(key_save)
        key_new_search = types.InlineKeyboardButton(text='üîç–ò—Å–∫–∞—Ç—å –µ—â—ë', callback_data='search')
        save_not_keyboard.add(key_new_search)
        key_menue = types.InlineKeyboardButton(text='üîô–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data='menu')
        save_not_keyboard.add(key_menue)
        bot.send_photo(call.from_user.id, pic, caption=send, reply_markup=save_not_keyboard, parse_mode="HTML")
        # –≤—ã—Å—ã–ª–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ñ—Ä–∞–∑—ã —Å–æ —Å—Ö–µ–º–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
    else:  # –µ—Å–ª–∏ —é–∑–µ—Ä —Ö–æ—á–µ—Ç –≤—ã–π—Ç–∏ –≤ –º–µ–Ω—é
        start(call)


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–¥–∞—á–∏ —Ä–∞–Ω–¥–æ–º–Ω–æ–π —Ñ—Ä–∞–∑—ã
def random_v(call):
    num = random.randrange(0, len(data))  # –±–µ—Ä—ë–º —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ
    jd[str(call.from_user.id)][0]["actuall_num"] = num
    with open("archieve/col.json", "w", encoding="UTF-8") as f:
        json.dump(jd, f, ensure_ascii=False)
        # –æ–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –º–æ–∂–Ω–æ –±—ã–ª–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ—Ä–∞–∑—É –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é
    pic = open(pic_path / f'{num}.png', 'rb')
    send = f"{analize(num)}\n\n–ï—Å–ª–∏ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å —Ñ—Ä–∞–∑–∞, –º–æ–∂–µ—à—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—åüëá"
    save_not_keyboard = types.InlineKeyboardMarkup()  # —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    key_save = types.InlineKeyboardButton(text='üìö–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é', callback_data=f"save")
    save_not_keyboard.add(key_save)
    key_new_random = types.InlineKeyboardButton(text='üé≤–î—Ä—É–≥–∞—è —Ä–∞–Ω–¥–æ–º–Ω–∞—è —Ñ—Ä–∞–∑–∞', callback_data='random')
    save_not_keyboard.add(key_new_random)
    key_menue = types.InlineKeyboardButton(text='üîô–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data='menu')
    save_not_keyboard.add(key_menue)
    bot.send_photo(call.from_user.id, pic, caption=send, reply_markup=save_not_keyboard, parse_mode="HTML")
    # –≤—Å—ë –ø–æ—á—Ç–∏ —Ç–∞–∫–∂–µ, –∫–∞–∫ –≤ –ø—Ä–æ—à–ª–æ–π —Ñ—É–Ω–∫—Ü–∏–∏, –Ω–æ –∫–Ω–æ–ø–∫–∏ –∏ –∑–∞–ø—Ä–æ—Å –¥—Ä—É–≥–∏–µ 


# –º–∞–ª–µ–Ω—å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∞ –ø–æ—Å—Ç–∞ —Å –∞–Ω–∞–ª–∏–∑–æ–º —Ñ—Ä–≤–∑—ã
def analize(n):
    phrase = data.iloc[n]['phrases']
    meaning = data.iloc[n]['meaning']
    analize = data.iloc[n]['analize']
    # –Ω–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω–æ–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–∑–µ –∏ –∫—Ä–∞—Å–∏–≤–æ —Å–∫–ª–µ–∏–≤–∞–µ–º
    post = f"‚ú®{phrase}‚ú®\n\n{meaning}\n\n{analize}"
    return post


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ—Ä–∞–∑—ã –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é
def save_key(call):
    tag_keyboard = types.InlineKeyboardMarkup()
    # —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    key_tag1 = types.InlineKeyboardButton(text='–°–º–µ—à–Ω–æ', callback_data='funny')
    tag_keyboard.add(key_tag1)
    key_tag2 = types.InlineKeyboardButton(text='–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ', callback_data='intel')
    tag_keyboard.add(key_tag2)
    key_tag3 = types.InlineKeyboardButton(text='–ì–ª—É–±–æ–∫–æ', callback_data='deep')
    tag_keyboard.add(key_tag3)
    key_tag4 = types.InlineKeyboardButton(text='–î—Ä—É–≥–æ–µ', callback_data='other')
    tag_keyboard.add(key_tag4)
    bot.send_message(call.message.chat.id, text='–ü–æ–¥ –∫–∞–∫–∏–º —Ç–µ–≥–æ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç—É —Ñ—Ä–∞–∑—É?', reply_markup=tag_keyboard)

    # –Ω–æ–≤—ã–π —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –ø–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω–∞ –ø–æ–º–µ–Ω—å–±—à–µ
    @bot.callback_query_handler(
        func=lambda call: call.data == "funny" or call.data == "intel" or call.data == "deep" or call.data == "other")
    def callback_worker_tag(call):
        user_id = str(call.message.chat.id)
        tag = call.data
        # –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å —Ñ—Ä–∞–∑—ã –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –≤ —Å–ª–æ–≤–∞—Ä—å –ø–æ–¥ –Ω—É–∂–Ω—ã–º —Ç—ç–≥–æ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª
        jd[user_id][1][f"{tag}"].append(jd[user_id][0]["actuall_num"])
        with open("archieve/col.json", "w", encoding="UTF-8") as f:
            json.dump(jd, f, ensure_ascii=False)
        # –ø–∏—à–µ–º —é–∑–µ—Ä—É, —á—Ç–æ –≤—Å—ë —Ö–æ—Ä–æ—à–æ, –∏ –ø–æ—Å—ã–ª–∞–µ–º –µ–≥–æ –≤ –º–µ–Ω—é
        bot.send_sticker(
            call.from_user.id, sticker="CAACAgIAAxkBAAELzFFmAu--0F2FCbSEiXJGVYGTbzG2iwACch4AAmsdEEp8_ME3dpS6ajQE")
        bot.send_message(call.message.chat.id, text='–°–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å! –í–æ—Ç —Å–Ω–æ–≤–∞ –º–µ–Ω—é:')
        menu(call)


# —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
def collection(call):
    user_id = str(call.message.chat.id)
    col_sum = 0
    for vu in jd[user_id][1].values():
        col_sum += len(vu)
    if col_sum == 0:
        bot.send_sticker(
            call.from_user.id, sticker="CAACAgIAAxkBAAELzE9mAu98fdfopnlWjVgw8e9BxA__iQACoRoAAobmEUrZ3um6wkbPzjQE")
        bot.send_message(call.message.chat.id, text='–¢—É—Ç –ø–æ–∫–∞ –ø—É—Å—Ç–æ! –°–Ω–∞—á–∞–ª–∞ –Ω–∞–¥–æ —Ö–æ—Ç—å —á—Ç–æ-—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å!')
        menu(call)
    # –µ—Å–ª–∏ –∫–æ–ª–ª–µ–∫—Ü–∏—è –ø—É—Å—Ç–∞—è, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —é–∑–µ—Ä–∞ –≤ –º–µ–Ω—é
    else:
        col_dict = jd[user_id][1]
        mat = pic(col_dict, user_id)
        cap = f"–§—Ä–∞–∑ —É —Ç–µ–±—è –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {mat[1]}\n–ù–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ —É–∫–∞–∑–∞–Ω–æ, \
—Å–∫–æ–ª—å–∫–æ –≤ –∫–∞–∂–¥–æ–º —Ä–∞–∑–¥–µ–ª–µ\n\n–ö–∞–∫–æ–π —Ä–∞–∑–¥–µ–ª —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å? –ò–ª–∏, –º–æ–∂–µ—Ç, –≤—Å–µ —Ä–∞–∑–æ–º?"
        # –ø—Ä–∏–¥–µ–ª—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–ø—É—Å—Ç—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
        tag1_keyboard = types.InlineKeyboardMarkup()
        key_tag0 = types.InlineKeyboardButton(text='–í—Å–µ', callback_data='all')
        tag1_keyboard.add(key_tag0)
        if len(col_dict["funny"]) > 0:
            key_tag11 = types.InlineKeyboardButton(text='–°–º–µ—à–Ω–æ', callback_data='1_funny')
            tag1_keyboard.add(key_tag11)
        if len(col_dict["intel"]) > 0:
            key_tag21 = types.InlineKeyboardButton(text='–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ', callback_data='1_intel')
            tag1_keyboard.add(key_tag21)
        if len(col_dict["deep"]) > 0:
            key_tag31 = types.InlineKeyboardButton(text='–ì–ª—É–±–æ–∫–æ', callback_data='1_deep')
            tag1_keyboard.add(key_tag31)
        if len(col_dict["other"]) > 0:
            key_tag41 = types.InlineKeyboardButton(text='–î—Ä—É–≥–æ–µ', callback_data='1_other')
            tag1_keyboard.add(key_tag41)
        bot.send_photo(call.message.chat.id, mat[0], caption=cap, reply_markup=tag1_keyboard)
        

        # —Å–Ω–æ–≤–∞ —Ö—ç–Ω–¥–ª–µ—Ä –ø–æ–º–µ–Ω—å–±—à–µ, –ø–æ—Å–∫–æ–ª—å–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–∞–∞–∞–∞–∞–ª–µ–Ω—å–∫–∞—è
        @bot.callback_query_handler(func=lambda
                call: call.data == "1_funny" or call.data == "1_intel" or
                      call.data == "1_deep" or call.data == "1_other" or call.data == "all")
        def callback_worker_col(call):
            user_id1 = str(call.message.chat.id)
            col_dict1 = jd[user_id1][1]
            # –≤—ã–¥–∞—ë–º –≤—Å—é –∫–æ–ª–ª–µ–∫—Ü–∏—é –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º
            if call.data == 'all':
                tags = []
                for ke, va in col_dict1.items():
                    if len(va) > 0:  # –≤—ã–¥–∞—ë–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ —Ä–∞–∑–¥–µ–ª—ã
                        va.sort()
                        one_tag = f'{tags_dict[ke][1]}–†–∞–∑–¥–µ–ª "{tags_dict[ke][0]}":'
                        # —Å–æ–±–∏—Ä–∞–µ–º –æ–¥–∏–Ω —Ä–∞–∑–¥–µ–ª –≤ –µ–¥–∏–Ω—É—é —Å—Ç—Ä–æ—á–∫—É –∏ –∑–∞–∫–∏–¥—ã–≤–∞–µ–º –≤ —Å–ø–∏—Å–æ–∫
                        # —Ä–µ—Ñ–µ—Ä–∏—Ä—É–µ–º—Å—è –∫ —Ç–æ–º—É —Å–∞–º–æ–º—É —Å–ª–æ–≤–∞—Ä—é –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞ —Å —Ä—É—Å—Å–∫–∏–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∏ —Å–º–∞–π–ª–∏–∫–∞–º–∏
                        for i in va:
                            for idx, row in data.iterrows():
                                if idx == i:
                                    one_tag += f"\n{idx}. {row['phrases']} ‚Äî {row['meaning']}"
                        # —Ä–µ—Ñ–µ—Ä–∏—Ä—É–µ–º—Å—è –∫ –æ–±—â–µ–π –±–∞–∑–µ, –∑–∞–¥–∞–Ω–Ω–æ–π –≤ –Ω–∞—á–∞–ª–µ 
                        tags.append(one_tag)
                ans = "\n\n".join(tags)
                text = f'üç±–í–°–Ø –ö–û–õ–õ–ï–ö–¶–ò–Øüç±\n\n{ans}\n\n–ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –≤—ã—Ä–∞–∂–µ–Ω–∏—è, —Ä–∞–∑–±–æ—Ä –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—á–µ—à—å \
–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å\n\n–ú–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ü–∏—Ñ—Ä, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –æ—Ç—Å—é–¥–∞ –≤ –º–µ–Ω—é'
                # —Å–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É
            else:
                tagl = call.data.split("_")
                tag = tagl[1]
                jd[str(call.from_user.id)][0]["cur_tag"] = tag
                with open("archieve/col.json", "w", encoding="UTF-8") as f:
                    json.dump(jd, f, ensure_ascii=False)
                    # –æ–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞–∑–¥–µ–ª
                capit_id = col_dict1[tag]
                capit_id.sort()
                pr = f'{tags_dict[tag][1]}–†–∞–∑–¥–µ–ª: "{tags_dict[tag][0]}"'
                for i in capit_id:
                    for idx, row in data.iterrows():
                        if idx == i:
                            pr += f"\n{idx}. {row['phrases']} ‚Äî {row['meaning']}"
                text = f'{pr}\n\n–ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –≤—ã—Ä–∞–∂–µ–Ω–∏—è, —Ä–∞–∑–±–æ—Ä –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å\n\n–ú–æ–∂–µ—à—å \
–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ü–∏—Ñ—Ä, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –æ—Ç—Å—é–¥–∞ –≤ –º–µ–Ω—é'
                # —Å–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É
            bot.send_message(call.from_user.id, text=text)
            bot.register_next_step_handler(call.message, overlook)
            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–π –ø–æ—Å—Ç –∏ –∂–¥—ë–º –Ω–æ–º–µ—Ä —Ñ—Ä–∞–∑—ã, –∫–æ—Ç–æ—Ä—É—é —é–∑–µ—Ä —Ö–æ—á–µ—Ç –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–π-—á–∞—Ä—Ç–∞, —Ç–∞–∫–∂–µ –≤—ã–¥–∞—ë—Ç —Å—É–º–º—É —Ñ—Ä–∞–∑ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
def pic(col_dict, user_id):
        taglen = []
        tags_list = []
        # –≥–æ—Ç–æ–≤–∏–º –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π:
        for k, v in col_dict.items():
            a = len(set(v))
            if  a > 0: # –µ—Å–ª–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ —á—Ç–æ-—Ç–æ –µ—Å—Ç—å (–∏–Ω–∞—á–µ –Ω—É–ª–µ–≤—ã–µ —Ç–µ–≥–∏ –±—É–¥—É—Ç –Ω–∞–∫–ª–∞–¥—ã–≤–∞—Ç—å—Å—è)
                b = tags_dict[k][0] + f": {a}"
                taglen.append(a)
                tags_list.append(b)
        # –¥–µ–ª–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É:
        plt.pie(x=taglen, labels=tags_list, colors=['goldenrod', 'gold', 'peru', 'white'],
                wedgeprops={'linewidth': 6.0, 'edgecolor': 'khaki'})
        my_circle = plt.Circle((0, 0), 0.7, color='khaki')
        plt.gcf().gca().add_artist(my_circle)
        plt.savefig(f'archieve/{user_id}_col.png')
        plt.clf() # –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É, —Ç–æ –Ω–æ–≤–∞—è –Ω–∞–ª–æ–∂–∏—Ç—Å—è –Ω–∞ —Å—Ç–∞—Ä—É—é
        chart = open(f'archieve/{user_id}_col.png', 'rb')
        return chart, sum(taglen)


# —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ—Ä–∞–∑—ã –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
def overlook(call):
    if str(call.text).isdigit() is True:
        numer = int(call.text) 
        jd[str(call.from_user.id)][0]["actuall_num"] = numer
        with open("archieve/col.json", "w", encoding="UTF-8") as f:
            json.dump(jd, f, ensure_ascii=False)
            # –æ–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ —É–¥–∞–ª–∏—Ç—å —Ñ—Ä–∞–∑—É –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        pic = open(pic_path / f'{numer}.png', 'rb')
        send = f"{analize(numer)}\n\n–ï—Å–ª–∏ —Ä–∞–∑–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å —Ñ—Ä–∞–∑–∞, –º–æ–∂–µ—à—å —É–¥–∞–ª–∏—Ç—åüëá"
        # —Å–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ —Å –∞–Ω–∞–ª–∏–∑–æ–º –∏ –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É
        small_keyboard = types.InlineKeyboardMarkup()  # —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        if jd[str(call.from_user.id)][0]["cur_tag"] != "":
            # –µ—Å–ª–∏ —é–∑–µ—Ä —Å–ª—É—á–∞–π–Ω–æ –Ω–∞–±—Ä–∞–ª –Ω–æ–º–µ—Ä —Ñ—Ä–∞–∑—ã, –∫–æ—Ç–æ—Ä–æ–π –Ω–µ—Ç –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏, —Ç–æ –º—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
            # "—É–¥–∞–ª–∏—Ç—å" –∏ "–≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–∞–∑–¥–µ–ª—É"
            key_del = types.InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –∏–∑ —Ä–∞–∑–¥–µ–ª–∞', callback_data="del")
            small_keyboard.add(key_del)
            key_back_1 = types.InlineKeyboardButton(text='üîô–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–∞–∑–¥–µ–ª—É', callback_data='back_1')
            small_keyboard.add(key_back_1)
        key_back_2 = types.InlineKeyboardButton(text='üîô–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é', callback_data="back_2")
        small_keyboard.add(key_back_2)
        key_menue = types.InlineKeyboardButton(text='üîôüîô–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data='menu')
        small_keyboard.add(key_menue)
        bot.send_photo(call.from_user.id, pic, caption=send, reply_markup=small_keyboard, parse_mode="HTML")
    else:
        a = str(call.text)
        a.lower()
        start(call)

    # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã —Å –º–∞–ª–µ–Ω—å–∫–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    @bot.callback_query_handler(
            func=lambda call: call.data == "del" or call.data == "back_1" or call.data == "back_2")
    def callback_worker_incoll(call):
        user_id = str(call.message.chat.id)
        user_tags_dict = jd[user_id][1]
        if call.data == "del":
            for k, v in user_tags_dict.items():
                for i in v:
                    if i == jd[str(call.from_user.id)][0]["actuall_num"] and k == jd[str(call.from_user.id)][0]["cur_tag"]:
                        # –µ—Å–ª–∏ –Ω–∞–º –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ —É–¥–∞–ª–∏—Ç—å, –º—ã —ç—Ç–æ —É–¥–∞–ª—è–µ–º –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞,
                        # –ø–æ—Ç–æ–º—É —á—Ç–æ —é–∑–µ—Ä –º–æ–∂–µ—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –æ–¥–Ω—É —Ñ—Ä–∞–∑—É –≤ —Ä–∞–∑–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã
                        v.remove(i)
                        user_tags_dict[k] = v
                        jd[user_id][1] = user_tags_dict
                        with open("archieve/col.json", "w", encoding="UTF-8") as f:
                            json.dump(jd, f, ensure_ascii=False)
                        bot.send_sticker(call.from_user.id, 
                                sticker="CAACAgIAAxkBAAELzE1mAu5wR453Q3jkpiay1cWwGioGxwACWhoAAtewWEoVSEt7yUPEQTQE")
                        text = f'–£–¥–∞–ª–µ–Ω–æ!'
                        # –∫–æ–≥–¥–∞ —É–¥–∞–ª–∏–ª–∏ –∏–Ω–¥–µ–∫—Å —Ñ—Ä–∞–∑—ã –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏, —Å–Ω–æ–≤–∞ –≤—ã–¥–∞—ë–º –º–µ–Ω—é
                        bot.send_message(call.from_user.id, text=text)
                        smaller_keyboard = types.InlineKeyboardMarkup()
                        key_back_1 = types.InlineKeyboardButton(text='üîô–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–∞–∑–¥–µ–ª—É', callback_data='back_1')
                        smaller_keyboard.add(key_back_1)  # –µ—Å–ª–∏ –º—ã —á—Ç–æ-—Ç–æ —É–¥–∞–ª–∏–ª–∏, —Ç–æ —Ä–∞–∑–¥–µ–ª —Ç–æ—á–Ω–æ –±—ã–ª
                        key_back_2 = types.InlineKeyboardButton(text='üîô–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é', callback_data="back_2")
                        smaller_keyboard.add(key_back_2)
                        key_menue = types.InlineKeyboardButton(text='üîôüîô–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data='menu')
                        smaller_keyboard.add(key_menue)
                        bot.send_message(call.from_user.id, text=text, reply_markup=smaller_keyboard)
        if call.data == "back_1":
            # –µ—Å–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Ä–∞–∑–¥–µ–ª, —Ç–æ —Ä–µ—Ñ–µ—Ä–∏—Ä—É–µ–º –∫ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
            # –∏ –¥—É–±–ª–∏—Ä—É–µ–º —Ñ-—Ü–∏—é –≤—ã–¥–∞—á–∏ —Ä–∞–∑–¥–µ–ª–∞, –Ω–æ –±–µ–∑ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ call
            tag = jd[str(call.from_user.id)][0]["cur_tag"]
            capit_id = user_tags_dict[tag]
            capit_id.sort()
            pr = f'{tags_dict[tag][1]}–†–∞–∑–¥–µ–ª: "{tags_dict[tag][0]}"'
            for i in capit_id:
                for idx, row in data.iterrows():
                    if idx == i:
                        pr += f"\n{idx}. {row['phrases']} ‚Äî {row['meaning']}"
            text = f'{pr}\n\n–ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –≤—ã—Ä–∞–∂–µ–Ω–∏—è, —Ä–∞–∑–±–æ—Ä –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å\n\n–ú–æ–∂–µ—à—å \
–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ü–∏—Ñ—Ä, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –æ—Ç—Å—é–¥–∞ –≤ –º–µ–Ω—é'
            bot.send_message(call.from_user.id, text=text)
            bot.register_next_step_handler(call.message, overlook)
        if call.data == "back_2":
            collection(call)


# –≥–ª–∞–≤–Ω—ã–π —Ö—ç–Ω–¥–ª–µ—Ä –≤—Å–µ—è –±–æ—Ç–∞, –æ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –∏ —Ç–µ, —á—Ç–æ —Å –Ω–∏–º–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç
@bot.callback_query_handler(func=lambda call: call.data == 'menu' or call.data == "search"
                                or call.data == "random" or call.data == "collection" or call.data == "save")
def callback_worker(call):
    if call.data == 'menu':
        menu(call)
    elif call.data == "search":  # call.data —ç—Ç–æ callback_data, –∫–æ—Ç–æ—Ä—É—é –º—ã —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏
        bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏ —Å–ª–æ–≤–æ/—Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –∏—â–µ—à—å.\
\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∏—â–∏ –ø–æ —Å–ª—É–∂–µ–±–Ω—ã–º —Å–ª–æ–≤–∞–º, –∏–Ω–∞—á–µ –ø–æ–∏—Å–∫ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–∞—Å—Ç!\n\n\
–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª –∏—Å–∫–∞—Ç—å, —Ç–æ –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º \menu –æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ non')
        bot.register_next_step_handler(call.message, search)
        # –í–æ—Ç —Ç–∞–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é,
    elif call.data == "random":
        random_v(call)
    elif call.data == "collection":
        collection(call)
    elif call.data == "save":
        save_key(call)


bot.infinity_polling(none_stop=True, interval=0)
# –±–µ–∑ —ç—Ç–æ–π —à—Ç—É–∫–∏ –±–æ—Ç –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
